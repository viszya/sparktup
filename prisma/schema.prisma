// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model Onboarding {
  id        String  @id @default(cuid())
  name      String?
  email     String?
  jobTitle  String?
  statement String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id                String           @id @default(cuid())
  fullName          String?
  jobTitle          String
  username          String
  location          String
  connections       String
  yearsOfExperience String
  about             String
  availableForWork   Boolean
  experiences       Experience[]
  projects          Project[]
  topSkills         TopSkill[]
  recommendations   Recommendation[]
  tags              String[]
  resumeLink        String
}

model Experience {
  id              String   @id @default(cuid())
  companyLogoSrc  String
  companyName     String
  companyImgSrc   String
  engangment      String
  relativeOfWork  String
  jobTitle        String
  location        String
  time            String
  jobDescriptions String[]
  Profile         Profile? @relation(fields: [profileId], references: [id])
  profileId       String?
}

model Project {
  id        String   @id @default(cuid())
  name      String
  src       String
  link      String
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

model TopSkill {
  id          String   @id @default(cuid())
  name        String
  color       String
  description String
  Profile     Profile? @relation(fields: [profileId], references: [id])
  profileId   String?
}

model Recommendation {
  id        String   @id @default(cuid())
  name      String
  jobTitle  String
  srcImage  String
  message   String
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}
