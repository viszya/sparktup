generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  fullName          String?
  jobTitle          String?
  username          String?
  location          String?
  yearsOfExperience String?
  about             String?
  proEmail          String?
  availableForWork  Boolean?
  hasAJob           Boolean?
  resumeLink        String?
  profileTags       String[]
  interestedTags    String[]
  experiences       Experience[]
  projects          Project[]
  topSkills         TopSkill[]
  recommendations   Recommendation[]
  company           Company[]
  companyId         String?
}

model Company {
  id                     String               @id @default(cuid())
  companyName            String?
  linkedInMembers        String?
  logoSrc                String?
  location               String?
  website                String?
  industry               String?
  companySize            String?
  size                   String?
  foundingYear           String?
  missionValues          String?
  missionAndValues       String?
  about                  String?
  solutionsOverview      String?
  keyBenefits            String?
  keyFeatures            String?
  companyCulture         String?
  termsAndConditionsLink String?
  privacyPolicyLink      String?
  specialties            String[]
  contactInformation     ContactInformation[]
  testimonials           Testimonial[]
  teamMembers            TeamMember[]
  careerOpportunities    CareerOpportunity[]
  mediaGallery           String[]
  eventData              EventData[]
  User                   User?                @relation(fields: [userId], references: [id])
  userId                 String?
}

model Testimonial {
  id         String  @id @default(cuid())
  clientName String
  feedback   String
  company    Company @relation(fields: [companyId], references: [id])
  companyId  String
}

model TeamMember {
  id        String  @id @default(cuid())
  name      String
  role      String
  photoSrc  String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model ContactInformation {
  id        String  @id @default(cuid())
  email     String
  phone     String
  address   String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model CareerOpportunity {
  id        String  @id @default(cuid())
  position  String
  location  String
  applyLink String
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model EventData {
  id        String   @id @default(cuid())
  date      DateTime
  title     String
  location  String
  imgsrc    String
  attendees String
  viewLink  String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
}

model Experience {
  id              String   @id @default(cuid())
  companyLogoSrc  String
  companyName     String
  companyImgSrc   String
  engagement      String
  relativeOfWork  String
  jobTitle        String
  location        String
  time            String
  jobDescriptions String[]
  User            User?    @relation(fields: [userId], references: [id])
  userId          String?
}

model Project {
  id     String  @id @default(cuid())
  name   String
  src    String
  link   String
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model TopSkill {
  id               String  @id @default(cuid())
  skillName        String
  skillDescription String
  color            String
  User             User?   @relation(fields: [userId], references: [id])
  userId           String?
}

model Recommendation {
  id       String  @id @default(cuid())
  name     String
  jobTitle String
  srcImage String
  message  String
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
}

model ApplicantStats {
  id              String @id @default(cuid())
  profieViews     Int    @default(0)
  jobApplications Int    @default(0)
  jobOffers       Int    @default(0)
  connections     Int    @default(0)
}
