generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  phone             String?
  profileSrc        String?          @default("/profile2.png")
  fullName          String?
  jobTitle          String?
  username          String?
  location          String?
  accountType       String?
  yearsOfExperience String?
  accountStatus     Boolean          @default(false)
  about             String?
  proEmail          String?
  availableForWork  Boolean?
  views             Int              @default(0)
  hasAJob           Boolean?
  resumeLink        String?
  profileTags       String[]
  interestedTags    String[]
  experiences       Experience[]
  projects          Project[]
  topSkills         TopSkill[]
  recommendations   Recommendation[]
  company           Company[]
  Application       Application[]
}

model Company {
  id                     String               @id @default(cuid())
  views                  Int                  @default(0)
  applications           Int                  @default(0)
  acceptedApplications   Int                  @default(0)
  companyName            String?
  linkedInMembers        String?
  logoSrc                String?
  location               String?
  website                String?
  industry               String?
  companySize            String?
  size                   String?
  companyBannerImgSrc    String?
  foundingYear           String?
  missionValues          String?
  missionAndValues       String?
  about                  String?
  solutionsOverview      String?
  keyBenefits            String?
  keyFeatures            String?
  companyCulture         String?
  termsAndConditionsLink String?
  privacyPolicyLink      String?
  specialties            String[]
  mediaGallery           String[]
  contactInformation     ContactInformation[]
  testimonials           Testimonial[]
  teamMembers            TeamMember[]
  careerOpportunities    CareerOpportunity[]
  eventData              EventData[]
  Application            Application[]
  User                   User?                @relation(fields: [userId], references: [id])
  userId                 String?
}

model Testimonial {
  id         String  @id @default(cuid())
  clientName String?
  feedback   String?
  company    Company @relation(fields: [companyId], references: [id])
  companyId  String
}

model TeamMember {
  id        String  @id @default(cuid())
  name      String?
  role      String?
  photoSrc  String?
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model ContactInformation {
  id        String  @id @default(cuid())
  email     String?
  phone     String?
  address   String?
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model CareerOpportunity {
  id                 String  @id @default(cuid())
  position           String?
  location           String?
  applyLink          String?
  companyLogo        String?
  description        String?
  pricingDescription String?
  sizeDescription    String?
  skills             String?
  jobLink            String?
  seeSrc             String?
  thumbnail          String?
  about              String?
  pay                String?
  companyAbout       String?
  company            Company @relation(fields: [companyId], references: [id])
  companyId          String
}

model EventData {
  id        String    @id @default(cuid())
  date      String
  title     String
  location  String
  imgsrc    String?
  attendees String?
  viewLink  String?
  eventType String?
  eventBy   String?
  about     String?
  seeSrc    String?
  attendSrc String?
  speakers  Speaker[]
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
}

model Speaker {
  id          String    @id @default(cuid())
  name        String
  imgsrc      String
  position    String
  eventData   EventData @relation(fields: [eventDataId], references: [id])
  eventDataId String
}

model Experience {
  id              String   @id @default(cuid())
  companyLogoSrc  String
  companyName     String
  companyImgSrc   String
  engagement      String
  relativeOfWork  String
  jobTitle        String
  location        String
  time            String
  jobDescriptions String[]
  User            User?    @relation(fields: [userId], references: [id])
  userId          String?
}

model Project {
  id     String  @id @default(cuid())
  name   String
  src    String
  link   String
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model TopSkill {
  id               String  @id @default(cuid())
  skillName        String
  skillDescription String
  color            String
  User             User?   @relation(fields: [userId], references: [id])
  userId           String?
}

model Recommendation {
  id       String  @id @default(cuid())
  name     String
  jobTitle String
  srcImage String
  message  String
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
}

model ApplicantStats {
  id              String @id @default(cuid())
  profieViews     Int    @default(0)
  jobApplications Int    @default(0)
  jobOffers       Int    @default(0)
  connections     Int    @default(0)
}

model Application {
  id                           String   @id @default(cuid())
  nID                          Int      @default(0000)
  status                       String   @default("Not Viewed")
  priority                     String   @default("low")
  job                          String?
  technicalSkills              String?
  softSkills                   String?
  certifications               String?
  startDate                    String?
  employmentType               String?
  desiredWorkSchedule          String?
  convictedOfCrime             String?
  interestReason               String?
  suitableCandidateReason      String?
  challengingSituation         String?
  backgroundCheckAuthorization Boolean  @default(false)
  termsAndConditionsAgreement  Boolean  @default(false)
  fullName                     String?
  company                      Company? @relation(fields: [companyId], references: [id])
  companyId                    String
  applicant                    User?    @relation(fields: [applicantId], references: [id])
  applicantId                  String
}
